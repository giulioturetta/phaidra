image: docker:24

variables:
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - build_and_push
  - testing_builds
  - release

services:
  - docker:24-dind

build-api:
  stage: build_and_push
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker build -f dockerfiles/api.dockerfile
    -t $CI_REGISTRY_USER/api-base:latest
    -t $CI_REGISTRY_USER/api-base:$CI_COMMIT_SHORT_SHA . &&
    docker push --all-tags $CI_REGISTRY_USER/api-base
  rules:
    - changes:
        - dockerfiles/api.dockerfile

build-chronos:
  stage: build_and_push
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker build -f dockerfiles/chronos.dockerfile
    -t $CI_REGISTRY_USER/chronos-base:latest
    -t $CI_REGISTRY_USER/chronos-base:$CI_COMMIT_SHORT_SHA . &&
    docker push --all-tags $CI_REGISTRY_USER/chronos-base
  rules:
    - changes:
        - dockerfiles/chronos.dockerfile

build-httpd:
  stage: build_and_push
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker build -f dockerfiles/httpd.dockerfile
    -t $CI_REGISTRY_USER/httpd-base:latest
    -t $CI_REGISTRY_USER/httpd-base:$CI_COMMIT_SHORT_SHA . &&
    docker push --all-tags $CI_REGISTRY_USER/httpd-base
  rules:
    - changes:
        - dockerfiles/httpd.dockerfile

build-imageserver:
  stage: build_and_push
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
  script: >
    docker build -f dockerfiles/imageserver.dockerfile
    -t $CI_REGISTRY_USER/imageserver-base:latest
    -t $CI_REGISTRY_USER/imageserver-base:$CI_COMMIT_SHORT_SHA . &&
    docker push --all-tags $CI_REGISTRY_USER/imageserver-base
  # rules:
  #   - changes:
  #       - dockerfiles/imageserver.dockerfile

# build-demo:
#   stage: testing_builds
#   script:
#     - cd compose_demo
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
#     - docker compose up -d --quiet-pull --build
#     - docker compose down
#     - docker logout

# build-ssl:
#   stage: testing_builds
#   script:
#     - cd compose_ssl
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
#     - docker compose up -d --quiet-pull --build
#     - docker compose down
#     - docker logout

# build-shib:
#   stage: testing_builds
#   script:
#     - cd compose_shib
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
#     - docker compose up -d --quiet-pull --build
#     - docker compose down
#     - docker logout
    
# release_job:
#   stage: release
#   image: registry.gitlab.com/gitlab-org/release-cli:latest
#   rules:
#     - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
#   script:
#     - echo "running release_job"
#   release:                               # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
#     tag_name: '$CI_COMMIT_TAG'
#     description: '$CI_COMMIT_TAG'
